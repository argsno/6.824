package main

import (
	"bufio"
	"fmt"
	"mapreduce"
	"os"
	"regexp"
	"strconv"
	"strings"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	reg, _ := regexp.Compile("[^a-zA-Z0-9]+")
	contents = reg.ReplaceAllString(contents, " ")
	scanner := bufio.NewScanner(strings.NewReader(contents))
	scanner.Split(bufio.ScanWords)
	kvs := make([]mapreduce.KeyValue, 0)
	for scanner.Scan() {
		kvs = append(kvs, mapreduce.KeyValue{Key: scanner.Text(), Value: "1"})
	}
	return kvs
	// Your code here (Part II).
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	sum := 0
	for _, value := range values {
		v, _ := strconv.Atoi(value)
		sum += v
	}
	return strconv.Itoa(sum)
	// Your code here (Part II).
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
